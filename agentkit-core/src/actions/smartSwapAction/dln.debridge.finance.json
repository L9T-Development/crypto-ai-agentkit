{
	"openapi": "3.0.0",
	"paths": {

		"/v1.0/supported-chains": {
			"get": {
				"operationId": "AppControllerV10_getSupportedChainResponse",
				"summary": "",
				"deprecated": true,
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedChainsResponse"
								}
							}
						}
					}
				},
				"tags": [
					"utils"
				]
			}
		},
		"/v1.0/supported-chains-info": {
			"get": {
				"operationId": "AppControllerV10_getSupportedChainInfoResponse",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SupportedChainsInfoResponse"
								}
							}
						}
					}
				},
				"tags": [
					"utils"
				]
			}
		},
		"/v1.0/token-list": {
			"get": {
				"operationId": "AppControllerV10_getTokens",
				"parameters": [
					{
						"name": "chainId",
						"required": true,
						"in": "query",
						"description": "ID of a chain",
						"examples": {
							"1": {
								"summary": "Ethereum",
								"value": "1"
							},
							"10": {
								"summary": "Optimism",
								"value": "10"
							},
							"56": {
								"summary": "BNB Chain",
								"value": "56"
							},
							"137": {
								"summary": "Polygon",
								"value": "137"
							},
							"250": {
								"summary": "Fantom",
								"value": "250"
							},
							"8453": {
								"summary": "Base",
								"value": "8453"
							},
							"42161": {
								"summary": "Arbitrum One",
								"value": "42161"
							},
							"43114": {
								"summary": "Avalanche",
								"value": "43114"
							},
							"59144": {
								"summary": "Linea",
								"value": "59144"
							},
							"7565164": {
								"summary": "Solana",
								"value": "7565164"
							},
							"100000001": {
								"summary": "Neon",
								"value": "100000001"
							},
							"100000002": {
								"summary": "Gnosis",
								"value": "100000002"
							},
							"100000004": {
								"summary": "Metis",
								"value": "100000004"
							},
							"100000005": {
								"summary": "Bitrock",
								"value": "100000005"
							},
							"100000006": {
								"summary": "CrossFi",
								"value": "100000006"
							},
							"100000010": {
								"summary": "zkEvmCronos",
								"value": "100000010"
							},
							"100000013": {
								"summary": "Story",
								"value": "100000013"
							},
							"100000014": {
								"summary": "Sonic",
								"value": "100000014"
							},
							"100000017": {
								"summary": "Abstract",
								"value": "100000017"
							},
							"100000020": {
								"summary": "Berachain",
								"value": "100000020"
							}
						},
						"schema": {
							"enum": [
								"1",
								"10",
								"56",
								"137",
								"250",
								"8453",
								"42161",
								"43114",
								"59144",
								"7565164",
								"100000001",
								"100000002",
								"100000004",
								"100000005",
								"100000006",
								"100000010",
								"100000013",
								"100000014",
								"100000017",
								"100000020"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenListResponse"
								}
							}
						}
					}
				},
				"tags": [
					"utils"
				]
			}
		},
		"/v1.0/chain/transaction": {
			"get": {
				"operationId": "SingleSwapControllerV10_getChainTransaction",
				"parameters": [
					{
						"name": "chainId",
						"required": true,
						"in": "query",
						"description": "An ID of a chain, a chain where the swap must be performed",
						"examples": {
							"1": {
								"summary": "Ethereum",
								"value": "1"
							},
							"10": {
								"summary": "Optimism",
								"value": "10"
							},
							"56": {
								"summary": "BNB Chain",
								"value": "56"
							},
							"137": {
								"summary": "Polygon",
								"value": "137"
							},
							"250": {
								"summary": "Fantom",
								"value": "250"
							},
							"8453": {
								"summary": "Base",
								"value": "8453"
							},
							"42161": {
								"summary": "Arbitrum One",
								"value": "42161"
							},
							"43114": {
								"summary": "Avalanche",
								"value": "43114"
							},
							"59144": {
								"summary": "Linea",
								"value": "59144"
							},
							"7565164": {
								"summary": "Solana",
								"value": "7565164"
							},
							"100000001": {
								"summary": "Neon",
								"value": "100000001"
							},
							"100000002": {
								"summary": "Gnosis",
								"value": "100000002"
							},
							"100000004": {
								"summary": "Metis",
								"value": "100000004"
							},
							"100000005": {
								"summary": "Bitrock",
								"value": "100000005"
							},
							"100000006": {
								"summary": "CrossFi",
								"value": "100000006"
							},
							"100000010": {
								"summary": "zkEvmCronos",
								"value": "100000010"
							},
							"100000013": {
								"summary": "Story",
								"value": "100000013"
							},
							"100000014": {
								"summary": "Sonic",
								"value": "100000014"
							},
							"100000017": {
								"summary": "Abstract",
								"value": "100000017"
							},
							"100000020": {
								"summary": "Berachain",
								"value": "100000020"
							}
						},
						"schema": {
							"enum": [
								"1",
								"10",
								"56",
								"137",
								"250",
								"8453",
								"42161",
								"43114",
								"59144",
								"7565164",
								"100000001",
								"100000002",
								"100000004",
								"100000005",
								"100000006",
								"100000010",
								"100000013",
								"100000014",
								"100000017",
								"100000020"
							],
							"type": "string"
						}
					},
					{
						"name": "tokenIn",
						"required": true,
						"in": "query",
						"description": "An address of an input token to swap",
						"examples": {
							"usdt": {
								"summary": "USDT token on Ethereum",
								"value": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
							},
							"native": {
								"summary": "Native coin (e.g., ETH on Ethereum, BNB on BNB Chain)",
								"value": "0x0000000000000000000000000000000000000000"
							},
							"native_solana": {
								"summary": "Native token on SOLANA",
								"value": "11111111111111111111111111111111"
							},
							"usdc_solana": {
								"summary": "USDC token on SOLANA",
								"value": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenInAmount",
						"required": true,
						"in": "query",
						"description": "An amount of input tokens to swap",
						"examples": {
							"usdt": {
								"summary": "50 USDT (decimals=6)",
								"value": 50000000
							},
							"busd": {
								"summary": "50 BUSD (decimals=18)",
								"value": 50000000000000000000
							},
							"eth": {
								"summary": "0.1 ETH (decimals=18)",
								"value": 100000000000000000
							},
							"sol": {
								"summary": "0.1 SOL (decimals=9)",
								"value": "100000000"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "slippage",
						"required": false,
						"in": "query",
						"description": "A slippage constraint (in %) is a safeguard during swaps (on both source and destination chains, if applicable). It is also used to calculate the minimum possible outcome during estimation. This property can be set to \"auto\" so that the API will suggest the best possible slippage.",
						"schema": {
							"default": "auto",
							"type": "string"
						}
					},
					{
						"name": "tokenOut",
						"required": true,
						"in": "query",
						"description": "An address of a target token.",
						"examples": {
							"usdc": {
								"summary": "USDC token on the Ethereum chain",
								"value": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
							},
							"native": {
								"summary": "Native coin (e.g., ETH on Ethereum, BNB on BNB Chain)",
								"value": "0x0000000000000000000000000000000000000000"
							},
							"usdc_solana": {
								"summary": "USDC token on SOLANA",
								"value": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenOutRecipient",
						"required": true,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "affiliateFeePercent",
						"required": false,
						"in": "query",
						"description": "\n The share of the input amount to be distributed to the `affiliateFeeRecipient` (if given) address as an affiliate fee.\n \n\n \nIf you are building on top of deSwap, you might want to take a small fee relative to the amount of a token a user provides for a swap. To achieve this, set this parameter to a desired % (e.g. `0.1` stands for 0.1%; the max value is `10` which stands for 10% of `srcAmountInParam`) and specify your wallet address in the `affiliateFeeRecipient` parameter.\n \n\n \nFor example, setting this parameter to `0.1` means that when the user gives 5000 USDT then you will receive 5 USDT immediately after transaction is being confirmed.\n       ",
						"examples": {
							"no_fee": {
								"summary": "No affiliate fee",
								"value": 0
							},
							"fee_0.1": {
								"summary": "Set 0.1% affiliate fee",
								"value": 0.1
							},
							"fee_1": {
								"summary": "Set 1% affiliate fee",
								"value": 1
							}
						},
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "affiliateFeeRecipient",
						"required": false,
						"in": "query",
						"description": "An address (on an origin chain) that will receive affiliate fees according to the `affiliateFeePercent` parameter. For solana affiliate fee you have to create & provide Jupiter's referral key (https://referral.jup.ag/dashboard).",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "senderAddress",
						"required": false,
						"in": "query",
						"description": "Address (on the source chain) who submits input tokens for a cross-chain swap",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChainTransactionResponseV10"
								}
							}
						}
					},
					"400": {
						"description": "The request is malformed, has missing parameters, or has incorrect or contradicting parameter values. Possible error ids: \n  \n        - INVALID_QUERY_PARAMETERS\n  \n  \n        - AFFILIATE_FEE_PERCENT_NOT_SET\n  \n  \n        - AFFILIATE_FEE_RECIPIENT_NOT_SET\n  \n  \n        - UNSUPPORTED_TOKEN_IN\n  \n  \n        - UNSUPPORTED_TOKEN_OUT\n  \n",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestResponse"
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle. Possible error ids: \n  \n        - INTERNAL_SERVER_ERROR\n  \n  \n        - INTERNAL_SDK_ERROR\n  \n",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"tags": [
					"single chain swap"
				]
			}
		},
		"/v1.0/chain/estimation": {
			"get": {
				"operationId": "SingleSwapControllerV10_getChainEstimation",
				"parameters": [
					{
						"name": "chainId",
						"required": true,
						"in": "query",
						"description": "An ID of a chain, a chain where the swap must be performed",
						"examples": {
							"1": {
								"summary": "Ethereum",
								"value": "1"
							},
							"10": {
								"summary": "Optimism",
								"value": "10"
							},
							"56": {
								"summary": "BNB Chain",
								"value": "56"
							},
							"137": {
								"summary": "Polygon",
								"value": "137"
							},
							"250": {
								"summary": "Fantom",
								"value": "250"
							},
							"8453": {
								"summary": "Base",
								"value": "8453"
							},
							"42161": {
								"summary": "Arbitrum One",
								"value": "42161"
							},
							"43114": {
								"summary": "Avalanche",
								"value": "43114"
							},
							"59144": {
								"summary": "Linea",
								"value": "59144"
							},
							"7565164": {
								"summary": "Solana",
								"value": "7565164"
							},
							"100000001": {
								"summary": "Neon",
								"value": "100000001"
							},
							"100000002": {
								"summary": "Gnosis",
								"value": "100000002"
							},
							"100000004": {
								"summary": "Metis",
								"value": "100000004"
							},
							"100000005": {
								"summary": "Bitrock",
								"value": "100000005"
							},
							"100000006": {
								"summary": "CrossFi",
								"value": "100000006"
							},
							"100000010": {
								"summary": "zkEvmCronos",
								"value": "100000010"
							},
							"100000013": {
								"summary": "Story",
								"value": "100000013"
							},
							"100000014": {
								"summary": "Sonic",
								"value": "100000014"
							},
							"100000017": {
								"summary": "Abstract",
								"value": "100000017"
							},
							"100000020": {
								"summary": "Berachain",
								"value": "100000020"
							}
						},
						"schema": {
							"enum": [
								"1",
								"10",
								"56",
								"137",
								"250",
								"8453",
								"42161",
								"43114",
								"59144",
								"7565164",
								"100000001",
								"100000002",
								"100000004",
								"100000005",
								"100000006",
								"100000010",
								"100000013",
								"100000014",
								"100000017",
								"100000020"
							],
							"type": "string"
						}
					},
					{
						"name": "tokenIn",
						"required": true,
						"in": "query",
						"description": "An address of an input token to swap",
						"examples": {
							"usdt": {
								"summary": "USDT token on Ethereum",
								"value": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
							},
							"native": {
								"summary": "Native coin (e.g., ETH on Ethereum, BNB on BNB Chain)",
								"value": "0x0000000000000000000000000000000000000000"
							},
							"native_solana": {
								"summary": "Native token on SOLANA",
								"value": "11111111111111111111111111111111"
							},
							"usdc_solana": {
								"summary": "USDC token on SOLANA",
								"value": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenInAmount",
						"required": true,
						"in": "query",
						"description": "An amount of input tokens to swap",
						"examples": {
							"usdt": {
								"summary": "50 USDT (decimals=6)",
								"value": 50000000
							},
							"busd": {
								"summary": "50 BUSD (decimals=18)",
								"value": 50000000000000000000
							},
							"eth": {
								"summary": "0.1 ETH (decimals=18)",
								"value": 100000000000000000
							},
							"sol": {
								"summary": "0.1 SOL (decimals=9)",
								"value": "100000000"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "slippage",
						"required": false,
						"in": "query",
						"description": "A slippage constraint (in %) is a safeguard during swaps (on both source and destination chains, if applicable). It is also used to calculate the minimum possible outcome during estimation. This property can be set to \"auto\" so that the API will suggest the best possible slippage.",
						"schema": {
							"default": "auto",
							"type": "string"
						}
					},
					{
						"name": "tokenOut",
						"required": true,
						"in": "query",
						"description": "An address of a target token.",
						"examples": {
							"usdc": {
								"summary": "USDC token on the Ethereum chain",
								"value": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
							},
							"native": {
								"summary": "Native coin (e.g., ETH on Ethereum, BNB on BNB Chain)",
								"value": "0x0000000000000000000000000000000000000000"
							},
							"usdc_solana": {
								"summary": "USDC token on SOLANA",
								"value": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "affiliateFeePercent",
						"required": false,
						"in": "query",
						"description": "\n The share of the input amount to be distributed to the `affiliateFeeRecipient` (if given) address as an affiliate fee.\n \n\n \nIf you are building on top of deSwap, you might want to take a small fee relative to the amount of a token a user provides for a swap. To achieve this, set this parameter to a desired % (e.g. `0.1` stands for 0.1%; the max value is `10` which stands for 10% of `srcAmountInParam`) and specify your wallet address in the `affiliateFeeRecipient` parameter.\n \n\n \nFor example, setting this parameter to `0.1` means that when the user gives 5000 USDT then you will receive 5 USDT immediately after transaction is being confirmed.\n       ",
						"examples": {
							"no_fee": {
								"summary": "No affiliate fee",
								"value": 0
							},
							"fee_0.1": {
								"summary": "Set 0.1% affiliate fee",
								"value": 0.1
							},
							"fee_1": {
								"summary": "Set 1% affiliate fee",
								"value": 1
							}
						},
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "affiliateFeeRecipient",
						"required": false,
						"in": "query",
						"description": "An address (on an origin chain) that will receive affiliate fees according to the `affiliateFeePercent` parameter.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChainEstimationResponseV10"
								}
							}
						}
					},
					"400": {
						"description": "The request is malformed, has missing parameters, or has incorrect or contradicting parameter values. Possible error ids: \n  \n        - INVALID_QUERY_PARAMETERS\n  \n  \n        - AFFILIATE_FEE_PERCENT_NOT_SET\n  \n  \n        - AFFILIATE_FEE_RECIPIENT_NOT_SET\n  \n  \n        - UNSUPPORTED_TOKEN_IN\n  \n  \n        - UNSUPPORTED_TOKEN_OUT\n  \n",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestResponse"
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle. Possible error ids: \n  \n        - INTERNAL_SERVER_ERROR\n  \n  \n        - INTERNAL_SDK_ERROR\n  \n",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerErrorResponse"
								}
							}
						}
					}
				},
				"tags": [
					"single chain swap"
				]
			}
		}
	}
}